import SwiftUI
import AVKit

struct SubscriptionOptionView2: View {
    let subscription: SubscriptionType
    let isSelected: Bool
    var body: some View {
        HStack {
            VStack(alignment: .leading) {
                Text(subscription.rawValue)
                if subscription == .annual {
                    Text("66% Savings!")
                        .font(.caption)
                        .foregroundColor(.red)
                }
            }
            Spacer()
            Text(subscription.price)
                .bold()
            if isSelected {
                Image(systemName: "checkmark.circle.fill")
                    .foregroundColor(.blue)
            }
        }
        .padding()
        .background(isSelected ? Color.blue.opacity(0.2) : Color.clear)
        .overlay(
            RoundedRectangle(cornerRadius: 8)
                .stroke(Color.gray, lineWidth: 1)
        )
        .cornerRadius(8)
    }
}

enum SubscriptionType2: String, CaseIterable {
    case annual = "Annual Subscription"
    case monthly = "Monthly Subscription"
    var price: String {
        switch self {
        case .annual:
            return "$199/year"
        case .monthly:
            return "$49.99/month"
        }
    }
}

struct SearchPopupView: View {
    @Binding var isPresented: Bool
    @State private var query: String = ""
    @State private var selectedOption: String = "data"
    @State private var apiResponse: String = ""
    @State private var isLoading = false
    @FocusState private var isTextFieldFocused: Bool

    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 20) {
                HStack {
                    Spacer()
                    Button(action: {
                        isPresented = false
                    }) {
                        Image(systemName: "xmark.circle.fill")
                            .font(.title)
                            .foregroundColor(.gray)
                    }
                    .padding(.trailing, 10)
                    .padding(.vertical, 20)
                }

                VStack(alignment: .leading, spacing: 20) {
                    Text("Help me understand...")
                        .font(.headline)
                        .padding(.leading, 30)

                    TextField("e.g. Electric Car Trends, Netflix Data", text: $query)
                        .font(.system(size: 36))
                        .frame(height: 80)
                        .padding()
                        .background(Color.white)
                        .cornerRadius(8)
                        .overlay(
                            RoundedRectangle(cornerRadius: 8)
                                .stroke(Color.gray, lineWidth: 0)
                        )
                        .padding()
                        .focused($isTextFieldFocused)

                    VStack(alignment: .leading, spacing: 20) {
                        RadioButtonField(id: "data", label: "Using Survey Data", isOn: $selectedOption)
                        RadioButtonField(id: "consumer", label: "Using Consumer Perspectives", isOn: $selectedOption)
                    }
                    .padding(.leading, 30)

                    Spacer()

                    Button(action: {
                        isLoading = true
                        submitQuery()
                        hideKeyboard()
                    }) {
                        Text(isLoading ? "Loading..." : "Ask fNograph AI")
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(8)
                    .padding(.bottom, 20)
                    .disabled(isLoading)

                    if isLoading {
                        ProgressView()
                            .progressViewStyle(CircularProgressViewStyle(tint: .blue))
                            .padding(.top, 10)
                    }

                    // Display the API response of the POST request
                    Text(apiResponse)
                        .padding()
                        .background(Color.white)
                        .cornerRadius(8)
                        .opacity(apiResponse.isEmpty ? 0 : 1) // Hide if empty
                }
            }
            .padding()
            .onAppear {
                isTextFieldFocused = true
            }
        }
    }

    func submitQuery() {
        let apiUrlString = selectedOption == "data" ?
            "https://flowiseai-railway-production-2253.up.railway.app/api/v1/prediction/623c373c-eb91-4f7d-9f9c-b478f00de8d8" :
            "https://flowiseai-railway-production-2253.up.railway.app/api/v1/prediction/45e9553c-e497-4bc3-bded-eccd952d4f00"
        guard let apiUrl = URL(string: apiUrlString) else { return }
        var request = URLRequest(url: apiUrl)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        let bearerToken = "TrPLV/rjYH2RCSDtsrWZ01BO4bbUGJPRZmvTtZhKRWA="
        request.setValue("Bearer \(bearerToken)", forHTTPHeaderField: "Authorization")
        let body = ["question": query]
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            apiResponse = "Failed to serialize JSON payload."
            isLoading = false // Hide loading icon
            return
        }
        URLSession.shared.dataTask(with: request) { data, _, error in
            DispatchQueue.main.async {
                if let data = data, let responseString = String(data: data, encoding: .utf8) {
                    apiResponse = responseString
                } else {
                    apiResponse = "Failed to get a response."
                }
                isLoading = false // Hide loading icon
            }
        }.resume()
    }

    // Function to hide the keyboard
    private func hideKeyboard() {
        UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
    }
}

struct RadioButtonField: View {
    let id: String
    let label: String
    @Binding var isOn: String

    var body: some View {
        Button(action: { isOn = id }) {
            HStack {
                Circle()
                    .fill(isOn == id ? Color.blue : Color.clear)
                    .frame(width: 20, height: 20)
                    .overlay(Circle().stroke(Color.blue, lineWidth: 2))
                Text(label)
            }
        }
    }
}

struct SettingsView: View {
    @Binding var isPresented: Bool
    @State private var selectedSubscription: SubscriptionType? = nil

    var body: some View {
        VStack {
            Text("Settings")
                .font(.largeTitle)
                .padding()

            Spacer()

            // Add your settings options and actions here
            VStack {
                ForEach(SubscriptionType.allCases, id: \.self) { subscription in
                    SubscriptionOptionView2(subscription: subscription, isSelected: selectedSubscription == subscription)
                        .onTapGesture {
                            selectedSubscription = subscription
                        }
                        .padding(.vertical, 5)
                }
            }
            .background(Color.white)
            .cornerRadius(10)
            .padding(.vertical)

            Spacer()

            Button(action: {
                isPresented = false // Close the settings popup when this button is tapped
            }) {
                Text("Close")
            }
            .padding()
        }
    }
}

struct MenuBar2: View {
    @State private var isSearchPopupPresented: Bool = false
    @State private var isPopupVisible: Bool = false // New state for the popup

    var body: some View {
        HStack(spacing: 30) {
            Image(systemName: "house.fill")
                .resizable()
                .scaledToFit()
                .frame(width: 30, height: 30)
                .onTapGesture { /* Handle house icon tap here */ }
            Button(action: { isSearchPopupPresented = true }) {
                Image(systemName: "magnifyingglass")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 30, height: 30)
            }
            Button(action: { isPopupVisible.toggle() }) { // Button to toggle the popup
                Image(systemName: "line.horizontal.3")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 30, height: 30)
            }
        }
        .padding(.horizontal, 20)
        .padding(.vertical, 15)
        .background(Color.white)
        .cornerRadius(12)
        .fullScreenCover(isPresented: $isSearchPopupPresented) { SearchPopupView(isPresented: $isSearchPopupPresented) }
        .sheet(isPresented: $isPopupVisible) {
            // Full-screen popup view
            PopupView(isVisible: $isPopupVisible)
                .edgesIgnoringSafeArea(.all) // Make it cover the entire screen
        }
    }
}


struct PopupView: View {
    @Binding var isVisible: Bool

    var body: some View {
        if isVisible {
            ZStack {
                Color.black.opacity(0.5).edgesIgnoringSafeArea(.all)

                VStack {
                    Button(action: {
                        // Handle the "Food" link action
                        isVisible = false
                        // Add your code to navigate to the "Food" section or perform any desired action
                    }) {
                        Text("Food")
                            .foregroundColor(.white)
                            .padding(10)
                    }
                    
                    Divider()
                    
                    Button(action: {
                        // Handle the "Fashion" link action
                        isVisible = false
                        // Add your code to navigate to the "Fashion" section or perform any desired action
                    }) {
                        Text("Fashion")
                            .foregroundColor(.white)
                            .padding(10)
                    }
                }
                .background(Color.blue)
                .cornerRadius(10)
                .padding()
            }
        }
    }
}



struct TestView: View {
    @State private var config: Configuration?
    @State private var isSettingsPopupPresented: Bool = false
    @State private var isSubscriptionPopupPresented: Bool = false // New state for the subscription popup

    func loadConfig() {
        guard let url = URL(string: "https://www.fnograph.com/getfnograph/cardinfo23.json") else { return }
        let task = URLSession.shared.dataTask(with: url) { data, _, error in
            guard let data = data, error == nil else { return }
            do {
                let config = try JSONDecoder().decode(Configuration.self, from: data)
                DispatchQueue.main.async { self.config = config }
            } catch { print("Decoding Error: \(error)") }
        }
        task.resume()
    }

    
    var body: some View {
        ZStack(alignment: .bottom) {
            VStack {
                Image("fnographquick")
                    .resizable()
                    .scaledToFit()
                    .padding()
                    .frame(height: 70)
                ScrollView {
                    VStack(spacing: 1) {
                        ForEach(config?.sections ?? [], id: \.url) { section in
                            SectionView(section: section)
                        }
                    }
                }
            }
            .onAppear {
                loadConfig()
                DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
                    self.isSubscriptionPopupPresented = true
                }
            }

            MenuBar2()
                .padding(.bottom, 30)
        }
        .fullScreenCover(isPresented: $isSettingsPopupPresented) {
            SettingsView(isPresented: $isSettingsPopupPresented)
        }
        .fullScreenCover(isPresented: $isSubscriptionPopupPresented) {
            SubscriptionPopupView(isPresented: $isSubscriptionPopupPresented)
        }
    }
}

struct SubscriptionPopupView: View {
    @Binding var isPresented: Bool

    var body: some View {
        // Customize your subscription options here
        // This view will be presented as a pop-up after 5 seconds
        VStack {
            Text("Choose a Subscription")
                .font(.title)
                .padding()

            VStack {
                ForEach(SubscriptionType.allCases, id: \.self) { subscription in
                    SubscriptionOptionView2(subscription: subscription, isSelected: false)
                        .padding(.vertical, 5)
                }
            }
            .background(Color.white)
            .cornerRadius(10)
            .padding()

            Button(action: {
                isPresented = false
            }) {
                Text("Close")
            }
            .padding()
        }
    }
}

struct SectionView: View {
    var section: Section
    @State private var descriptionText: String
    @State private var isLoading: Bool = false
    @State private var isGenerating: Bool = false
    @State private var dots: String = ""

    init(section: Section) {
        self.section = section
        _descriptionText = State(initialValue: section.description)
    }

    var body: some View {
        VStack(spacing: 0) {
            content
            actionView
                .padding(.bottom, 10)
            descriptionView
            Spacer().frame(height: 48)
        }
    }

    var content: some View {
        switch section.type {
        case "video": return AnyView(VideoPlayerView(url: URL(string: section.url) ?? URL(string: "https://example.com")!))
        case "image": return AnyView(ImageSection(url: URL(string: section.url) ?? URL(string: "https://example.com")!))
        case "carousel": return AnyView(CarouselSection(items: section.items ?? []))
        default: return AnyView(Text("Unknown section type: \(section.type)"))
        }
    }

    var actionView: some View {
        Group {
            if isGenerating {
                Text("Generating" + dots)
                    .bold()
                    .frame(maxWidth: .infinity, alignment: .center)
                    .padding(10)
                    .background(Color.white)
                    .border(Color.black, width: 1)
                    .onAppear { startAnimatingDots() }
                    .onDisappear { stopAnimatingDots() }
            } else {
                generateIdeasButton
            }
        }
    }

    var generateIdeasButton: some View {
        Button(action: {
            self.isGenerating = true
            self.showAPIResponse()
        }) {
            HStack {
                Text(section.buttonText)
                    .bold()
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .padding(.leading, 20)

                Image(systemName: "arrow.right")
                Image(systemName: "arrow.right")
                    .padding(.trailing, 20)
            }
            .padding(10)
            .background(Color.white)
            .border(Color.black, width: 1)
        }
        .buttonStyle(PlainButtonStyle())
    }

    var descriptionView: some View {
        HStack {
            Text(descriptionText)
                .font(.subheadline)
                .padding(.leading, 30)
            Spacer()
        }
    }

    func startAnimatingDots() {
        Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { timer in
            if dots.count < 3 {
                dots.append(".")
            } else {
                dots = ""
            }

            if !isLoading {
                timer.invalidate()
                isGenerating = false
            }
        }
    }

    func stopAnimatingDots() {
        dots = ""
    }

    func showAPIResponse() {
        guard let apiUrl = URL(string: section.apiUrl) else {
            descriptionText = "Invalid API URL."
            return
        }

        guard let prompt = section.prompt else {
            descriptionText = "Prompt not available."
            return
        }

        isLoading = true
        var request = URLRequest(url: apiUrl)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer TrPLV/rjYH2RCSDtsrWZ01BO4bbUGJPRZmvTtZhKRWA=", forHTTPHeaderField: "Authorization")

        let payload = ["question": prompt]

        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: payload)
        } catch {
            descriptionText = "Failed to serialize JSON payload."
            return
        }

        URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                isLoading = false
                if let data = data, let responseString = String(data: data, encoding: .utf8) {
                    let cleanedResponse = responseString.trimmingCharacters(in: CharacterSet(charactersIn: "\""))
                    descriptionText = cleanedResponse.replacingOccurrences(of: "\\n", with: "\n")
                } else {
                    descriptionText = "Sorry, I couldn't fetch the answer. Please try again."
                }
            }
        }.resume()
    }
}

struct VideoSection: View {
    var url: URL
    var body: some View {
        VideoPlayerView(url: url)
    }
}

struct ImageSection: View {
    var url: URL
    @State private var uiImage: UIImage?
    var body: some View {
        if let image = uiImage {
            Image(uiImage: image).resizable().scaledToFit()
        } else { Text("Loading...").onAppear { loadImage() } }
    }

    func loadImage() {
        DispatchQueue.global().async {
            if let data = try? Data(contentsOf: url) {
                DispatchQueue.main.async { uiImage = UIImage(data: data) }
            }
        }
    }
}

struct CarouselSection: View {
    var items: [CarouselItem]
    @State private var currentIndex = 0
    var body: some View {
        TabView(selection: $currentIndex) {
            ForEach(0..<items.count, id: \.self) { index in
                CarouselItemView(item: items[index]).tag(index)
            }
        }
        .tabViewStyle(PageTabViewStyle())
        .frame(width: 400, height: 400)
    }
}

struct CarouselItemView: View {
    var item: CarouselItem
    var body: some View {
        switch item.type {
        case "video":
            if let url = URL(string: item.url) {
                VideoPlayerView(url: url).frame(maxWidth: .infinity, maxHeight: .infinity).aspectRatio(1, contentMode: .fit)
            } else { Text("Invalid URL") }
        case "image":
            if let url = URL(string: item.url) {
                ImageView(url: url).frame(maxWidth: .infinity, maxHeight: .infinity).aspectRatio(1, contentMode: .fit)
            } else { Text("Invalid URL") }
        default:
            Text("Unknown item type: \(item.type)")
        }
    }
}

struct VideoPlayerView2: View {
    var url: URL
    var body: some View {
        VideoPlayer(player: AVPlayer(url: url)).aspectRatio(1, contentMode: .fit)
    }
}

struct ImageView: View {
    var url: URL
    @State private var uiImage: UIImage?
    var body: some View {
        Group {
            if let uiImage = uiImage {
                Image(uiImage: uiImage).resizable().scaledToFit().aspectRatio(1, contentMode: .fit)
            } else { Text("Loading...") }
        }
        .onAppear { loadImage() }
    }

    func loadImage() {
        if let data = try? Data(contentsOf: url) { uiImage = UIImage(data: data) }
    }
}

struct Configuration: Codable {
    var sections: [Section]
}

struct Section: Codable {
    var id: String { url }
    var type: String
    var url: String
    var description: String
    var items: [CarouselItem]?
    var prompt: String?
    var buttonText: String
    var apiUrl: String
}

struct CarouselItem: Codable {
    var id: String { url }
    var type: String
    var url: String
    var description: String
}

struct MyApp: App {
    var body: some Scene {
        WindowGroup { TestView() }
    }
}

struct TestView_Previews: PreviewProvider {
    static var previews: some View {
        TestView().previewLayout(.sizeThatFits)
    }
}
